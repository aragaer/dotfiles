#+STARTUP: overview

* Function to add hline to any table
#+begin_src emacs-lisp
  (defun org--add-hline (data)
    (if (and data (cdr data))
        (cons (car data) (cons 'hline (cdr data)))))
#+end_src
* Agenda fix for "org-extend-today-until"
** Helper functions
Functions to check if item is before or after the "extend-today-until"
timestamp.
#+begin_src emacs-lisp
  (defun aragaer/get-time-of-day (item)
    (org-find-text-property-in-string 'time-of-day item))

  (defun aragaer/item-before-extend (item)
    (let ((time-of-day (aragaer/get-time-of-day item))
          (today-until-minutes (* 60 org-extend-today-until)))
      (if time-of-day
          (< time-of-day today-until-minutes)
        t)))

  (defun aragaer/item-after-extend (item)
    (let ((time-of-day (aragaer/get-time-of-day item))
          (today-until-minutes (* 60 org-extend-today-until)))
      (if time-of-day
          (> time-of-day today-until-minutes)
        t)))
#+end_src
** Collect timestamps for "today" with respect to "extend-today-until"
Instead of getting items for just one date it collects items for two
consecutive dates and filters out the ones outside the required
interval.
#+begin_src emacs-lisp
  (defun aragaer/org-agenda-get-timestamps-today (orig-func &rest args)
    (let* ((dayn (calendar-absolute-from-gregorian date))
           (day-before (org-date-to-gregorian (1- dayn)))
           (day-after (org-date-to-gregorian (1+ dayn)))
           (today-until-minutes (* 60 org-extend-today-until))
           (orig (apply orig-func args)))
      (defvar date)
      (append
       (cl-remove-if #'aragaer/get-time-of-day orig)
       (if (< 0 org-extend-today-until)
           (append
            (cl-remove-if #'aragaer/item-before-extend orig)
            (cl-remove-if #'aragaer/item-after-extend
                          (let ((date day-after))
                            (apply orig-func args))))
         (append
          (cl-remove-if #'aragaer/item-before-extend
                        (let ((date day-before))
                          (apply orig-func args)))
          (cl-remove-if #'aragaer/item-after-extend orig))))))

  (advice-add 'org-agenda-get-timestamps
              :around #'aragaer/org-agenda-get-timestamps-today)
#+end_src
** Assign correct date to the "now" entry
#+begin_src emacs-lisp
  (defun aragaer/org-agenda-set-now-string-date (agenda-items)
    (let ((m (regexp-quote org-agenda-current-time-string)))
      (dolist (item agenda-items agenda-items)
        (when (string-match-p m item)
          (org-add-props item nil 'date (calendar-current-date))))))

  (advice-add 'org-agenda-add-time-grid-maybe
              :filter-return #'aragaer/org-agenda-set-now-string-date)
#+end_src
** Sort entries by both time and date
Default sort is by time only.
#+begin_src emacs-lisp
  (defsubst aragaer/get-org-date (i)
    (let ((prop (get-text-property 1 'date i)))
      (defvar date)
      (cond
       ((numberp prop) prop)
       (prop (calendar-absolute-from-gregorian prop))
       (t (calendar-absolute-from-gregorian date)))))

  (defun aragaer/org-cmp-time-and-date (a b)
    (let* ((da (aragaer/get-org-date a))
           (db (aragaer/get-org-date b)))
      (cond
       ((< da db) -1)
       ((< db da) +1)
       (t (org-cmp-time a b)))))

  (setopt org-agenda-cmp-user-defined #'aragaer/org-cmp-time-and-date)

  (cl-nsubstitute 'user-defined-up 'time-up
                  (alist-get 'agenda org-agenda-sorting-strategy))
#+end_src
* Roam tweaks
** Wrap db update into a single transaction
Speeds up the save greatly
#+begin_src emacs-lisp
  (advice-add 'org-roam-db-update-file :around
                (defun +org-roam-db-update-file (fn &rest args)
                    (emacsql-with-transaction (org-roam-db)
                      (apply fn args))))
#+end_src
** Org-agenda in roam
#+begin_src emacs-lisp
  (defun aragaer/add-to-agenda-maybe ()
    (unless (member (buffer-file-name) (org-agenda-files))
      (org-agenda-file-to-front)))

  (defun aragaer/remove-from-agenda-maybe (&optional filename)
    (let ((filename (or filename (buffer-file-name))))
      (if (member filename (org-agenda-files))
          (org-remove-file filename))))

  (defun aragaer/get-filetags ()
    (split-string (or (cadr (assoc "FILETAGS"
                                   (org-collect-keywords '("filetags"))))
                      "")
                  ":" 'omit-nulls))

  (defun aragaer/project-update-tag ()
    "Update PROJECT tag in the current buffer."
    (condition-case err
        (let ((has-tag (member "project" (aragaer/get-filetags)))
              (is-project (vulpea-project-p)))
          (cond
           ((and is-project (not has-tag)) (org-roam-tag-add '("project")))
           ((and (not is-project) has-tag) (org-roam-tag-remove '("project")))))
      (user-error (if (not (org-roam-node-at-point))
                      (user-error (concat "File "
                                          (buffer-file-name)
                                          " is not a roam node"))
                    (signal (car err) (cdr err))))))

  (defun aragaer/update-agenda ()
    "Add or remove roam file to agenda."
    (when (and (not (active-minibuffer-window))
               (fboundp 'org-roam-buffer-p)
               (org-roam-buffer-p))
      (save-excursion
        (goto-char (point-min))
        (aragaer/project-update-tag)
        (let ((tags (aragaer/get-filetags)))
          (if (or (member "agenda" tags)
                  (member "project" tags))
              (aragaer/add-to-agenda-maybe)
            (aragaer/remove-from-agenda-maybe))))))

  (add-hook 'find-file-hook #'aragaer/update-agenda)
  (add-hook 'before-save-hook #'aragaer/update-agenda)
#+end_src
*** Roam agenda category
#+begin_src emacs-lisp
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12(aragaer/agenda-category) %?-12t% s")
          (todo . " %i %-12(aragaer/agenda-category) ")
          (tags . " %i %-12(aragaer/agenda-category) ")
          (search . " %i %-12(aragaer/agenda-category) ")))

  (defun aragaer/agenda-category ()
    "Get category of item at point for agenda.

  Category is defined by one of the following items:

  - CATEGORY property
  - TITLE keyword or property for org-roam nodes
  - filename without directory and extension

  Usage example:

    (setq org-agenda-prefix-format
          '((agenda . \" %(aragaer/agenda-category) %?-12t %12s\")))

  Refer to `org-agenda-prefix-format' for more information."
    (let ((file-name (when buffer-file-name
                       (file-name-sans-extension
                        (file-name-nondirectory buffer-file-name))))
          (parent-title (when (org-roam-buffer-p)
                          (save-excursion
                            (org-up-heading-or-point-min)
                            (let ((node (org-roam-node-at-point)))
                              (and node (org-roam-node-title node))))))
          (category (and (derived-mode-p 'org-mode) (org-get-category))))
      (if (and parent-title
               (string-equal category file-name))
          parent-title
        (or category ""))))
#+end_src
*** Helper function for determining if roam-file has TODO items in it
#+begin_src emacs-lisp
(defun vulpea-project-p ()
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
  (org-element-map
      (org-element-parse-buffer 'headline)
      'headline
    (lambda (h)
      (eq (org-element-property :todo-type h)
          'todo))
    nil 'first-match))
#+end_src
** Do not inherit certain tags
#+begin_src emacs-lisp
  (setq org-tags-exclude-from-inheritance
        (append '("project" "next" "agenda" "here" "ATTACH")
                org-tags-exclude-from-inheritance))

  (defun aragaer/remove-hash-tags (tags)
    (mapcar
     (lambda (tag-list)
       (cl-remove ?# tag-list :key #'string-to-char :test #'char-equal))
     tags))

  (advice-add 'org-remove-uninherited-tags :filter-args #'aragaer/remove-hash-tags)
#+end_src
** Zettelkasten in roam
#+begin_src emacs-lisp
  (defun aragaer/zk-node-p (n)
    (member (org-roam-node-type n) (mapcar (lambda (x)
                                             (if (listp x)
                                                 (car x)
                                               x)) slipboxes)))

  (setq roam-zk-template
        `(file+head "unsorted/%<%Y%m%d%H%M%S>-${slug}.org"
                    ,(combine-and-quote-strings
                      `("#+title: ${title}"
                        "#+startup: showall"
                        "")
                      "\n")))

  (setq aragaer/roam-zk-templates
        `(("z" "zettel" plain "%?"
           :target ,roam-zk-template
           :immediate-finish t
           :unnarrowed t)))

  (defun aragaer/org-roam-find-zk (&optional keys)
    (interactive)
    (org-roam-node-find
     t "" #'aragaer/zk-node-p nil
     :templates aragaer/roam-zk-templates))

  (defun aragaer/org-roam-insert-zk (&optional keys)
    (interactive)
    (org-roam-node-insert
     'aragaer/zk-node-p
     :templates aragaer/roam-zk-templates))

  (define-key global-map (kbd "C-c n F") 'aragaer/org-roam-find-zk)
  (define-key org-mode-map (kbd "C-c n I") 'aragaer/org-roam-insert-zk)
  (define-key global-map (kbd "C-c n s")
    (defun aragaer/org-roam-find-slipbox ()
      (interactive)
      (let* ((org-roam-node-display-template "${title:*} ${context-tag:10}")
             (node (org-roam-node-read
                   "" (lambda (n)
                        (member "#slipbox" (org-roam-node-tags n)))
                   nil t "Open slipbox: ")))
        (if (org-roam-node-file node)
            (org-roam-node-visit node nil)
          (message "Slipbox file not found for %s" (org-roam-node-title node))))))
#+end_src
** filter nodes by tag
#+begin_src elisp
  (defvar aragaer--roam-node-tag-filter nil
    "Set to non-nil to only show nodes having the tag")

  (defun +aragaer--filtered-roam-node-read (orig-fun &rest args)
    (pcase-let ((`(,initial-input ,filter-fn . ,rest) args))
      (let ((new-filter (or filter-fn
                            (and aragaer--roam-node-tag-filter
                                 (lambda (n)
                                   (member aragaer--roam-node-tag-filter
                                           (org-roam-node-tags n)))))))
        (apply orig-fun `(,initial-input ,new-filter . ,rest)))))

  (advice-add 'org-roam-node-read :around #'+aragaer--filtered-roam-node-read)
#+end_src
** refile to container
#+begin_src elisp
  (defun aragaer--roam-refile (&optional any-target)
    (interactive "P")
    (let ((node (if any-target
                    (org-roam-node-read "" nil nil t "Refile to: ")
                  (let ((org-roam-node-display-template "${title:*} ${context-tag:10}")
                        (aragaer--roam-node-tag-filter (unless any-target "#container")))
                    (org-roam-node-read "" nil nil t "Refile to container: ")))))
      (when node
        (org-roam-refile node))))

  (define-key org-mode-map (kbd "C-c n w") 'aragaer--roam-refile)
#+end_src
