#+STARTUP: overview
* use-package
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC
** quelpa
#+begin_src emacs-lisp
  (use-package quelpa
    :ensure t
    :defer t
    :custom
    (quelpa-update-melpa-p nil "Don't update the MELPA git repo."))
#+end_src
** ese-package-quelpa
#+begin_src emacs-lisp
  (use-package quelpa-use-package
    :ensure t
    :init (setq quelpa-use-package-inhibit-loading-quelpa t))
#+end_src
** use-package custom-update
To be able to update lists in /custom/
#+BEGIN_SRC emacs-lisp
  (use-package use-package-custom-update
    :quelpa
    (use-package-custom-update
     :repo "a13/use-package-custom-update"
     :fetcher github
     :version original))
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package emacs
    :ensure t
    :config
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (global-font-lock-mode 1)
    (global-auto-revert-mode t)
    (global-undo-tree-mode t)
    (global-unset-key (kbd "C-x C-c"))
    (add-to-list 'default-frame-alist '(font . "M+ 1mn-11"))
    (when (fboundp 'set-fontset-font)
      ;; force M+ for japanese glyphs
      (set-fontset-font t 'han
                        (font-spec :family "M+ 2p light")
                        nil 'prepend))
    <<narrow-commands>>
    (setq-default indent-tabs-mode nil)
    (setq show-trailing-whitespace t
          ac-auto-show-menu 0.3
          whitespace-style '(face tabs tab-mark trailing)
          split-width-threshold 9999
          inhibit-startup-screen t
          frame-inhibit-implied-resize t
          initial-scratch-message nil))
#+END_SRC
** narrow commands
#+NAME: narrow-commands
#+BEGIN_SRC emacs-lisp :tangle no
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
#+END_SRC
* paths
** backups
#+BEGIN_SRC emacs-lisp
  (use-package files
    :custom
    (backup-directory-alist
     `(("." . ,(locate-user-emacs-file "backups"))))
    (auto-save-file-name-transforms
     `((".*" ,(locate-user-emacs-file "backups") t)))
    (auto-save-list-file-prefix
     (locate-user-emacs-file "backups/")))
#+END_SRC
** custom
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :after files
    :config
    (setf custom-file (locate-user-emacs-file "custom.el"))
    (add-hook 'after-init-hook
              (lambda () (load custom-file t))))
#+END_SRC
* evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode)
    (fset 'evil-visual-update-x-selection 'ignore)
    :custom
    (evil-undo-system 'undo-tree)
    (evil-search-module 'evil-search)
    :custom-update
    (evil-emacs-state-modes '(elfeed-search-mode
                              elfeed-show-mode)))
#+END_SRC
** treat underscore as a part of a word (in code)
Changing underscore to part of a word globally affects highlighting in
text modes which leads to hiccups in message-mode. I only need
"underscore as word" for code where I usually use snake_case
identifiers.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda () (modify-syntax-entry ?_ "w")))
#+END_SRC
* org
** capture templates
#+NAME: my-org-capture-templates
#+BEGIN_SRC emacs-lisp :tangle no
  (org-capture-templates
   '(("h" "Add Hledger entry"
      plain (file (lambda ()
                    (concat *hledger-dir*
                            (format-time-string "%Y/%m.journal" (current-time)))))
      "%<%Y-%m-%d> %^{entry title}\n %?"
      :empty-lines 1
      :unnarrowed t)
     ("r" "Read later")
     ("rw" "Web page"
      entry (file "~/Dropbox/org/review.org")
      "* READ [[%x][%?]]\nSCHEDULED:%^t")
     ("t" "todo")
     ("ts" "simple"
      entry (file "~/Dropbox/org/inbox.org")
      "* TODO %?")
     ("tt" "timed"
      entry (file "~/Dropbox/org/tickler.org.gpg")
      "* TODO %?\nSCHEDULED:%^t")))
#+END_SRC
** modules
#+NAME: my-org-modules
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'org-modules 'org-habit)
#+END_SRC
*** org-habits custom
#+NAME: org-habits-custom
#+BEGIN_SRC emacs-lisp :tangle no
  (org-habit-graph-column 80)
#+END_SRC
*** agenda custom
#+NAME: agenda-custom
#+BEGIN_SRC emacs-lisp :tangle no
  (org-agenda-dim-blocked-tasks t)
  (org-agenda-files (locate-user-emacs-file "agenda.list"))
  (org-agenda-span 1)
  (org-agenda-todo-list-sublevels nil)
  (org-sort-agenda-notime-is-late nil)
  (org-agenda-tags-todo-honor-ignore-options t)
  (org-agenda-custom-commands
   '(("d" "Undated tasks" alltodo ""
      ((org-agenda-todo-ignore-with-date t)
       (org-agenda-files (seq-remove
                          (lambda (file) (cl-search "mylife" file))
                          (org-agenda-files nil 'ifmode)))))
     ("t" . "Tree")
     ("tn" "Next" occur-tree "TODO.*:next:")
     ("tw" "Waiting" occur-tree "TODO.*:waiting:")
     ("ts" "Someday" occur-tree "TODO.*:someday:")
     ("o" "Overview"
      ((tags-todo "next"
                  ((org-agenda-overriding-header "Next")
                   (org-agenda-todo-ignore-scheduled 'future)))
       (tags-todo "calendar"
                  ((org-agenda-overriding-header "Calendar")
                   (org-agenda-todo-ignore-scheduled 'future)))
       (tags-todo "tickler"
                  ((org-agenda-overriding-header "Tickler")
                   (org-agenda-todo-ignore-scheduled 'future)))
       (agenda)))
     ("w" "Waiting" tags-todo "+waiting"
      ((org-agenda-todo-ignore-scheduled 'future)))
     ("s" "Someday" tags-todo "+someday")
     ("F" "Non-future" tags ""
      ((org-agenda-todo-ignore-scheduled 'future)))
     ("n" . "Next")
     ("nn" "Next" tags-todo "+next"
      ((org-agenda-todo-ignore-scheduled 'future)))
     ("nc" "Next - computer" tags-todo "+next+@computer"
      ((org-agenda-todo-ignore-scheduled 'future)))
     ("nh" "Next - home" tags-todo "+next+@home"
      ((org-agenda-todo-ignore-scheduled 'future)))
     ("nt" "Next - Topcon" tags-todo "+next+@topcon"
      ((org-agenda-todo-ignore-scheduled 'future)))))
#+END_SRC
*** vimacs narrow-to-subtree
#+name: vimacs/subtree
#+BEGIN_SRC emacs-lisp :tangle no
  (defun vimacs/org-narrow-to-subtree ()
    (interactive)
    (let ((org-indirect-buffer-display 'current-window))
      (if (not (boundp 'org-indirect-buffer-file-name))
          (let ((above-buffer (current-buffer))
                (org-filename (buffer-file-name)))
            (org-tree-to-indirect-buffer (1+ (org-current-level)))
            (setq-local org-indirect-buffer-file-name org-filename)
            (setq-local org-indirect-above-buffer above-buffer))
        (let ((above-buffer (current-buffer))
              (org-filename org-indirect-buffer-file-name))
          (org-tree-to-indirect-buffer (1+ (org-current-level)))
          (setq-local org-indirect-buffer-file-name org-filename)
          (setq-local org-indirect-above-buffer above-buffer)))))

  (defun vimacs/org-widen-from-subtree ()
    (interactive)
    (let ((above-buffer org-indirect-above-buffer)
          (org-indirect-buffer-display 'current-window))
      (kill-buffer)
      (switch-to-buffer above-buffer)))
#+END_SRC
** bind
#+NAME: org-bind-keys
#+BEGIN_SRC emacs-lisp :tangle no
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture))
#+END_SRC
** after init hook
There is some issue with startup-indented that requires org-reload
#+name: org-after-init
#+begin_src emacs-lisp :tangle no
  (setq org-startup-indented t)
  (org-reload)
  (define-key org-mode-map (kbd "<C-tab>") 'vimacs/org-narrow-to-subtree)
  (define-key org-mode-map (kbd "<M-tab>") 'vimacs/org-widen-from-subtree)
#+end_src
** use package
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package org
    :ensure org-plus-contrib
    :init
    <<vimacs/subtree>>
    :bind
    <<org-bind-keys>>
    :mode ("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)
    :init
    (add-hook 'after-init-hook (defun org-after-init ()
                                 <<org-after-init>>))
    <<my-org-modules>>
    :config
    (add-to-list 'org-todo-keyword-faces
                 '("CANCELLED" . (:foreground "blue" :weight bold)))
    (org-load-modules-maybe t)
    (unbind-key "C-'" org-mode-map) ; Free this one for avy
    :custom
    <<org-habits-custom>>
    <<agenda-custom>>
    <<my-org-capture-templates>>
    (org-use-sub-superscripts nil)
    (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    (org-confirm-babel-evaluate nil)
    (org-enforce-todo-dependencies t)
    (org-extend-today-until 3)
    (org-hide-leading-stars t)
    (org-log-into-drawer "LOGBOOK")
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-archive-location "archive/%s::")
    (org-hide-blocks-startup t)
    (org-refile-targets
     '((nil :maxlevel . 3)
       (org-agenda-files :maxlevel . 3)))
    :custom-face
    (org-mode-line-clock ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button))))))
#+END_SRC
** calendar
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :ensure nil
    :commands (calendar)
    :custom (calendar-week-start-day 1))
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
** slimhtml
#+BEGIN_SRC emacs-lisp
  (use-package ox-slimhtml
    :ensure t
    :after org)
#+END_SRC
** checklist
#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
#+END_SRC
** auto-close archive
Automatically close archive file after archiving a subtree
Unless it was open before archiving
#+BEGIN_SRC emacs-lisp
  (defun aragaer/auto-close-archive (orig-func &rest r)
    (let* ((location (org-archive--compute-location org-archive-location))
           (afile (car location))
           (abuffer (get-file-buffer afile)))
      (apply orig-func r)
      (when (not abuffer)
        (let ((abuffer (get-file-buffer afile)))
          (save-some-buffers t abuffer)
          (kill-buffer abuffer)))))

  (advice-add 'org-archive-subtree :around #'aragaer/auto-close-archive)
#+END_SRC
** reopen "nohide" blocks
I want my 'src' blocks to be hidden by default but their results
wrapped in blocks should be visible. For that I use ':wrap nohide'.
#+begin_src emacs-lisp
  (defun aragaer/show-nohide (&rest r)
    (let* ((e (org-element-at-point))
           (subtype (org-element-property :type e)))
      (when (equal subtype "nohide")
        (org-hide-block-toggle nil t e))))

  (advice-add
   'org-hide-block-all
   :after
   (lambda (&rest r) (org-block-map #'aragaer/show-nohide))
   '((name . "show-nohide")))
#+end_src
* utils
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** vdiff
#+BEGIN_SRC emacs-lisp
  (use-package vdiff
    :ensure t
    :custom
    (vdiff-truncate-lines t)
    :config
    (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)
    (evil-define-key 'normal vdiff-mode-map "," vdiff-mode-prefix-map))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :config
      (ivy-mode t)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) "))
#+END_SRC
** reverse-im
#+BEGIN_SRC emacs-lisp
  (use-package reverse-im
    :ensure t
    :demand t
    :bind
    ("M-T" . reverse-im-translate-word)
    :custom
    (reverse-im-char-fold t)
    (reverse-im-read-char-advice-function #'reverse-im-read-char-include)
    (reverse-im-read-char-exclude-commands
      '())
    (reverse-im-input-methods '("russian-computer"))
    :config
    (reverse-im-mode t))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status))
    :custom
    (magit-log-margin '(t age-abbreviated magit-log-margin-width t 7))
    :init
    (require 'magit-git)
    (require 'magit-process))
#+END_SRC
** slime                                                             :local:
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :commands slime-setup
    :defines slime-repl-mode-map
    :init
    (slime-setup '(slime-fancy))
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl"))
#+END_SRC
** epa-file
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config (epa-file-enable))
#+END_SRC
** ebdb
#+BEGIN_SRC emacs-lisp
  (use-package ebdb
    :ensure t
    :custom
    (ebdb-sources "~/Dropbox/org/ebdb"))
#+END_SRC
* helpers
** hledger
#+BEGIN_SRC emacs-lisp
  (defun hledger-account-read ()
    (interactive)
    (insert (completing-read
             "account: " (split-string (shell-command-to-string "hledger a") "\n" t)))
    (insert "  "))
#+END_SRC
* modes
** olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t)
#+END_SRC
** feature-mode
#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
    :ensure t)
#+END_SRC
** my-writing-mode
#+BEGIN_SRC emacs-lisp
  (define-derived-mode my-writing-mode org-mode "my-writing"
    (setq olivetti-body-width 120)
    (olivetti-mode t))
#+END_SRC
** hooks
*** prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook '(lambda ()
                             (setq indent-tabs-mode t)
                             (setq tab-width 4)))
#+END_SRC
*** octave
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+END_SRC
*** changelog
#+BEGIN_SRC emacs-lisp
  (rassq-delete-all 'change-log-mode auto-mode-alist)
#+END_SRC
* daily page
#+BEGIN_SRC emacs-lisp
  (defun daily-page ()
    (interactive)
    (let ((header "#-*- Mode: my-writing -*-\n"))
      (with-current-buffer
          (find-file
           (concat *daily-page-dir*
                   (format-time-string "%Y-%m-%d.txt" (current-time))))
        (my-writing-mode)
        (if (> 2 (point-max-marker))
            (insert header))
        (narrow-to-region (1+ (length header)) (point-max-marker)))))
#+END_SRC
* telega
#+BEGIN_SRC emacs-lisp
  (defun my-telega-ins--sticker-image (orig-fun &rest args)
    (let ((telega-use-images nil))
      (apply orig-fun args)))

  (defun telega/ignore-chatbuf (str)
    (let ((buf (get-buffer str)))
      (and buf (fboundp 'telega-buffer-p) (telega-buffer-p buf))))

  (with-eval-after-load 'ivy
    (add-to-list 'ivy-ignore-buffers #'telega/ignore-chatbuf))

  (use-package telega
    :ensure t
    :bind
    (:map mode-specific-map
          :prefix-map telega-map
          :prefix "t"
          ("t" . telega)
          ("c" . telega-chat-with))
    :custom
    (telega-use-images t)
    (telega-completing-read-function #'ivy-completing-read)
    (telega-symbol-msg-succeeded "-")
    (telega-symbol-msg-viewed "+")
    (telega-chat--display-buffer-action
     '((display-buffer-reuse-window display-buffer-use-some-window)))
    :custom-face
    (telega-chat-inline-reply ((t (:inherit 'font-lock-comment-face))))
    (telega-chat-user-title ((t (:inherit 'font-lock-function-name-face))))
    (telega-chat-timestamp ((t (:inherit 'org-agenda-date))))
    (telega-msg-status ((t (:inherit 'font-lock-constant-face))))
    :config
    (setq telega-server-libs-prefix
          (expand-file-name "~/.local/td"))
    (advice-add 'telega-ins--sticker-image :around
                'my-telega-ins--sticker-image)
    :commands (telega)
    :defer t)
#+END_SRC
* elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :bind (("C-c f" . elfeed))
    :custom
    (elfeed-feeds
     '(("https://github.com/simonmichael/hledger/releases.atom" github hledger)
       ("https://dilbert.com/feed" comics)
       ("https://xkcd.com/rss.xml" comics))))

  (use-package elfeed-goodies
    :ensure t
    :after elfeed
    :custom
    (elfeed-goodies/entry-pane-position 'bottom)
    :config
    (elfeed-goodies/setup))
#+END_SRC
* load local settings
#+BEGIN_SRC emacs-lisp
  (let ((local-settings-file (locate-user-emacs-file "local_settings.el")))
    (if (file-exists-p local-settings-file)
        (load local-settings-file)))
  (let ((local-org-settings-file (locate-user-emacs-file "local.org")))
    (if (file-exists-p local-org-settings-file)
        (org-babel-load-file local-org-settings-file)))
#+END_SRC
* config
** browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "google-chrome-stable")
#+END_SRC
