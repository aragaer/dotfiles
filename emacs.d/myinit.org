#+STARTUP: overview
* use-package
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure t
    :config
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (setq whitespace-style '(face tabs tab-mark trailing))
    (global-font-lock-mode 1)
    (setq show-trailing-whitespace t)
    (setq ac-auto-show-menu 0.3)
    (add-to-list 'default-frame-alist '(font . "monospace-12"))
    (add-text-properties (point-min) (point-max)
                         '(line-spacing 0.25 line-height 1.25))
    (setq inhibit-startup-screen t)
    (setq initial-scratch-message nil))
#+END_SRC
* paths
** backups
#+BEGIN_SRC emacs-lisp
  (use-package files
    :custom
    (backup-directory-alist
     `(("." . ,(locate-user-emacs-file "backups"))))
    (auto-save-file-name-transforms
     `((".*" ,(locate-user-emacs-file "backups") t)))
    (auto-save-list-file-prefix
     (locate-user-emacs-file "backups/")))
#+END_SRC
** custom
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :after files
    :config
    (setf custom-file (locate-user-emacs-file "custom.el"))
    (add-hook 'after-init-hook
              (lambda () (load custom-file t))))
#+END_SRC
* evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode)
    (fset 'evil-visual-update-x-selection 'ignore)
    :custom
    (evil-search-module (quote evil-search)))
#+END_SRC
** treat underscore as a part of a word
#+BEGIN_SRC emacs-lisp
  (modify-syntax-entry ?_ "w")
#+END_SRC
* org
** capture templates
#+NAME: my-org-capture-templates
#+BEGIN_SRC emacs-lisp :tangle no
  (org-capture-templates
   '(("h" "Add Hledger entry"
      plain (file (lambda ()
                    (concat *hledger-dir*
                            (format-time-string "%Y/%m.journal" (current-time)))))
      "%<%Y-%m-%d> %^{entry title}\n %?"
      :empty-lines 1
      :unnarrowed t)
     ("r" "Read later")
     ("rw" "Web page"
      entry (file "~/Dropbox/org/review.org")
      "* READ [[%x][%?]]\nSCHEDULED:%^t")
     ("t" "todo")
     ("ts" "simple"
      entry (file "~/Dropbox/org/inbox.org")
      "* TODO %?")
     ("tt" "timed"
      entry (file "~/Dropbox/org/tickler.org.gpg")
      "* TODO %?\nSCHEDULED:%^t")))
#+END_SRC
** modules
#+NAME: my-org-modules
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'org-modules 'org-habit)
#+END_SRC
*** org-habits custom
#+NAME: org-habits-custom
#+BEGIN_SRC emacs-lisp :tangle no
  (org-habit-graph-column 80)
#+END_SRC
*** agenda custom
#+NAME: agenda-custom
#+BEGIN_SRC emacs-lisp :tangle no
  (org-agenda-dim-blocked-tasks t)
  (org-agenda-files (locate-user-emacs-file "agenda.list"))
  (org-agenda-span 1)
  (org-agenda-todo-list-sublevels nil)
  (org-sort-agenda-notime-is-late nil)
  (org-agenda-tags-todo-honor-ignore-options t)
  (org-agenda-custom-commands
   '(("d" "Undated tasks" alltodo ""
      ((org-agenda-todo-ignore-with-date t)))
     ("n" "Next"
      ((tags-todo "next"
                  ((org-agenda-overriding-header "Next")
                   (org-agenda-todo-ignore-scheduled 'future)))
       (agenda)))))
#+END_SRC
*** vimacs narrow-to-subtree
#+name: vimacs/subtree
#+BEGIN_SRC emacs-lisp :tangle no
  (defun vimacs/org-narrow-to-subtree ()
    (interactive)
    (let ((org-indirect-buffer-display 'current-window))
      (if (not (boundp 'org-indirect-buffer-file-name))
          (let ((above-buffer (current-buffer))
                (org-filename (buffer-file-name)))
            (org-tree-to-indirect-buffer (1+ (org-current-level)))
            (setq-local org-indirect-buffer-file-name org-filename)
            (setq-local org-indirect-above-buffer above-buffer))
        (let ((above-buffer (current-buffer))
              (org-filename org-indirect-buffer-file-name))
          (org-tree-to-indirect-buffer (1+ (org-current-level)))
          (setq-local org-indirect-buffer-file-name org-filename)
          (setq-local org-indirect-above-buffer above-buffer)))))

  (defun vimacs/org-widen-from-subtree ()
    (interactive)
    (let ((above-buffer org-indirect-above-buffer)
          (org-indirect-buffer-display 'current-window))
      (kill-buffer)
      (switch-to-buffer above-buffer)))
#+END_SRC
** bind
#+NAME: org-bind-keys
#+BEGIN_SRC emacs-lisp :tangle no
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture))
#+END_SRC
** after init hook
There is some issue with startup-indented that requires org-reload
#+name: org-after-init
#+begin_src emacs-lisp :tangle no
  (setq org-startup-indented t)
  (org-reload)
  (define-key org-mode-map (kbd "<C-tab>") 'vimacs/org-narrow-to-subtree)
  (define-key org-mode-map (kbd "<M-tab>") 'vimacs/org-widen-from-subtree)
#+end_src
** use package
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package org
    :ensure org-plus-contrib
    :init
    <<vimacs/subtree>>
    :bind
    <<org-bind-keys>>
    :mode ("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)
    :init
    (add-hook 'after-init-hook (defun org-after-init ()
                                 <<org-after-init>>))
    <<my-org-modules>>
    :config
    (add-to-list 'org-todo-keyword-faces
                 '("CANCELLED" . (:foreground "blue" :weight bold)))
    (org-load-modules-maybe t)
    :custom
    <<org-habits-custom>>
    <<agenda-custom>>
    <<my-org-capture-templates>>
    (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    (org-confirm-babel-evaluate nil)
    (org-enforce-todo-dependencies t)
    (org-extend-today-until 3)
    (org-hide-leading-stars nil)
    (org-log-into-drawer "LOGBOOK")
    (org-log-repeat nil)
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-archive-location "archive/%s::")
    (org-refile-targets
     '((nil :maxlevel . 3)
       (org-agenda-files :maxlevel . 3)))
    :custom-face
    (org-mode-line-clock ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button))))))
#+END_SRC
** calendar
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :ensure nil
    :commands (calendar)
    :custom (calendar-week-start-day 1))
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
** slimhtml
#+BEGIN_SRC emacs-lisp
  (use-package ox-slimhtml
    :ensure t
    :after org)
#+END_SRC
** checklist
#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
#+END_SRC
** auto-close archive
Automatically close archive file after archiving a subtree
Unless it was open before archiving
#+BEGIN_SRC emacs-lisp
  (defun aragaer/auto-close-archive (orig-func &rest r)
    (let* ((location (org-archive--compute-location org-archive-location))
           (afile (car location))
           (abuffer (get-file-buffer afile)))
      (apply orig-func r)
      (when (not abuffer)
        (let ((abuffer (get-file-buffer afile)))
          (save-some-buffers t abuffer)
          (kill-buffer abuffer)))))

  (advice-add 'org-archive-subtree :around #'aragaer/auto-close-archive)
#+END_SRC
* utils
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** vdiff
#+BEGIN_SRC emacs-lisp
  (use-package vdiff
    :ensure t
    :custom
    (vdiff-truncate-lines t)
    :config
    (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)
    (evil-define-key 'normal vdiff-mode-map "," vdiff-mode-prefix-map))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode t))
#+END_SRC
** reverse-im
#+BEGIN_SRC emacs-lisp
  (use-package reverse-im
    :ensure t
    :demand t
    :bind
    ("M-T" . reverse-im-translate-word)
    :custom
    (reverse-im-char-fold t)
    (reverse-im-read-char-advice-function #'reverse-im-read-char-exclude)
    (reverse-im-input-methods '("russian-computer"))
    :config
    (reverse-im-mode t))
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom
    (projectile-completion-system 'ivy)
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (add-to-list 'projectile-globally-ignored-directories ".venv")
    (projectile-mode +1))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status))
    :custom
    (magit-log-margin '(t age-abbreviated magit-log-margin-width t 7))
    :init
    (require 'magit-git)
    (require 'magit-process))
#+END_SRC
** slime                                                             :local:
#+BEGIN_SRC emacs-lisp
  (use-package slime
    :commands slime-setup
    :defines slime-repl-mode-map
    :init
    (slime-setup '(slime-fancy))
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl"))
#+END_SRC
** epa-file
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config (epa-file-enable))
#+END_SRC
** ebdb
#+BEGIN_SRC emacs-lisp
  (use-package ebdb
    :ensure t
    :custom
    (ebdb-sources "~/Dropbox/org/ebdb"))
#+END_SRC
* helpers
** hledger
#+BEGIN_SRC emacs-lisp
  (defun hledger-account-read ()
    (interactive)
    (insert (completing-read
             "account: " (split-string (shell-command-to-string "hledger a") "\n" t)))
    (insert "  "))
#+END_SRC
* modes
** olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t)
#+END_SRC
** feature-mode
#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
    :ensure t)
#+END_SRC
** wc-mode
#+BEGIN_SRC emacs-lisp
  (use-package wc-mode
    :ensure t
    :custom (wc-modeline-format "%tw "))
#+END_SRC
** my-writing-mode
#+BEGIN_SRC emacs-lisp
  (define-derived-mode my-writing-mode org-mode "my-writing"
    (setq olivetti-body-width 80)
    (olivetti-mode t)
    (wc-mode t))
#+END_SRC
** hooks
*** prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook '(lambda ()
                             (setq indent-tabs-mode t)
                             (setq tab-width 4)))
#+END_SRC
*** octave
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+END_SRC
*** changelog
#+BEGIN_SRC emacs-lisp
  (rassq-delete-all 'change-log-mode auto-mode-alist)
#+END_SRC
* daily page
#+BEGIN_SRC emacs-lisp
  (defun daily-page ()
    (interactive)
    (let ((header "#-*- Mode: my-writing -*-\n"))
      (with-current-buffer
          (find-file
           (concat *daily-page-dir*
                   (format-time-string "%Y-%m-%d.txt" (current-time))))
        (my-writing-mode)
        (if (> 2 (point-max-marker))
            (insert header))
        (narrow-to-region (1+ (length header)) (point-max-marker)))))
#+END_SRC
* load local settings
#+BEGIN_SRC emacs-lisp
  (let ((local-settings-file (locate-user-emacs-file "local_settings.el")))
    (if (file-exists-p local-settings-file)
        (load local-settings-file)))
  (let ((local-org-settings-file (locate-user-emacs-file "local.org")))
    (if (file-exists-p local-org-settings-file)
        (org-babel-load-file local-org-settings-file)))
#+END_SRC
* stuff
** auto revert
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC
** indent tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** narrow commands
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
#+END_SRC
* config
** browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "google-chrome-stable")
#+END_SRC
