#+STARTUP: overview
* use-package
#+BEGIN_SRC emacs-lisp :noweb yes
  (require 'use-package)
  <<benchmark>>
#+END_SRC
** quelpa
#+begin_src emacs-lisp
  (use-package quelpa
    :ensure t
    :defer t
    :custom
    (quelpa-update-melpa-p nil "Don't update the MELPA git repo."))
#+end_src
** use-package-quelpa
#+begin_src emacs-lisp
  (use-package quelpa-use-package
    :ensure t
    :init (setq quelpa-use-package-inhibit-loading-quelpa t))
#+end_src
** use-package custom-update
To be able to update lists in /custom/
#+BEGIN_SRC emacs-lisp
  (use-package use-package-custom-update
    :quelpa
    (use-package-custom-update
     :repo "a13/use-package-custom-update"
     :fetcher github
     :version original))
#+END_SRC
* my custom
#+begin_src elisp
  (defvar *preferred-font* "M+ 1mn-11"
    "Preferred font")
  (defvar *browsers* '("firefox")
    "List of available browsers")
#+end_src
* load early local settings
#+BEGIN_SRC emacs-lisp
  (let ((local-org-settings-file (locate-user-emacs-file "early-local.org"))
        (vc-follow-symlinks t))
    (if (file-exists-p local-org-settings-file)
        (org-babel-load-file local-org-settings-file)))
#+END_SRC
* interface tweaks
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package emacs
    :ensure t
    :bind
    (("C-%" . query-replace-regexp))
    :config
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (global-font-lock-mode 1)
    (global-auto-revert-mode t)
    (global-unset-key (kbd "C-x C-c"))
    <<narrow-commands>>
    (setq-default indent-tabs-mode nil)
    (setq show-trailing-whitespace t
          ac-auto-show-menu 0.3
          whitespace-style '(face tabs tab-mark trailing)
          split-width-threshold 9999
          inhibit-startup-screen t
          frame-inhibit-implied-resize t
          initial-scratch-message nil
          sentence-end-double-space nil
          extended-command-suggest-shorter nil
          select-enable-primary t))
#+END_SRC
** narrow commands
#+NAME: narrow-commands
#+BEGIN_SRC emacs-lisp :tangle no
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
#+END_SRC
* paths
** backups
#+BEGIN_SRC emacs-lisp
  (use-package files
    :custom
    (backup-directory-alist
     `(("." . ,(locate-user-emacs-file "backups"))))
    (auto-save-file-name-transforms
     `((".*" ,(locate-user-emacs-file "backups") t)))
    (auto-save-list-file-prefix
     (locate-user-emacs-file "backups/")))
#+END_SRC
** custom
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :after files
    :config
    (setf custom-file (locate-user-emacs-file "custom.el"))
    (add-hook 'after-init-hook
              (lambda () (load custom-file t))))
#+END_SRC
* org
** capture templates
#+NAME: my-org-capture-templates
#+BEGIN_SRC emacs-lisp :tangle no
  (org-capture-templates
   '(("h" "Add Hledger entry"
      plain (file (lambda ()
                    (concat *hledger-dir*
                            (format-time-string "%Y/%m.journal" (current-time)))))
      "%<%Y-%m-%d> %^{entry title}\n %?"
      :empty-lines 1
      :unnarrowed t)
     ("r" "Read later")
     ("rw" "Web page"
      entry (file "~/Dropbox/org/review.org")
      "* READ [[%x][%?]]\nSCHEDULED:%^t")
     ("t" "todo")
     ("ts" "simple"
      entry (file "~/Dropbox/org/inbox.org")
      "* TODO %?")
     ("tt" "timed"
      entry (file "~/Dropbox/org/tickler.org.gpg")
      "* TODO %?\nSCHEDULED:%^t")))
#+END_SRC
** modules
#+NAME: my-org-modules
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'org-modules 'org-habit)
  (add-to-list 'org-modules 'org-checklist)
#+END_SRC
*** org-contrib
#+begin_src emacs-lisp
  (use-package org-contrib
    :ensure t)
#+end_src
*** ob-async
#+begin_src elisp
  (use-package ob-async
    :ensure t
    :config
    (setq ob-async-no-async-languages-alist '("elisp")))
#+end_src
*** org-habits custom
#+NAME: org-habits-custom
#+BEGIN_SRC emacs-lisp :tangle no
  (org-habit-graph-column 80)
#+END_SRC
*** agenda custom
#+NAME: agenda-custom
#+BEGIN_SRC emacs-lisp :tangle no
  (org-agenda-dim-blocked-tasks t)
  (org-agenda-files (locate-user-emacs-file "agenda.list"))
  (org-agenda-span 1)
  (org-agenda-todo-list-sublevels nil)
  (org-sort-agenda-notime-is-late nil)
  (org-agenda-tags-todo-honor-ignore-options t)
  (org-agenda-window-setup 'current-window)
  (org-agenda-time-grid
   '((daily today require-timed)
     ()
     "......" "----------------"))
  (org-agenda-custom-commands
   '(("d" "Undated tasks" alltodo ""
      ((org-agenda-todo-ignore-with-date t)
       (org-agenda-files (seq-remove
                          (lambda (file) (cl-search "mylife" file))
                          (org-agenda-files nil 'ifmode)))))
     ("j" "Unreviewed journal" tags-todo "+@journal"
      ((org-agenda-sorting-strategy '((agenda category-up)))))
     ("t" . "Tree")
     ("tn" "Next" occur-tree "TODO.*:next:")
     ("tw" "Waiting" occur-tree "TODO.*:waiting:")
     ("ts" "Someday" occur-tree "TODO.*:someday:")
     ("o" "Overview"
      ((tags-todo "next"
                  ((org-agenda-overriding-header "Next")
                   (org-agenda-todo-ignore-scheduled 'future)))
       (tags-todo "calendar"
                  ((org-agenda-overriding-header "Calendar")
                   (org-agenda-entry-types '(:scheduled))
                   (org-agenda-todo-ignore-scheduled 'future)))
       (tags-todo "tickler"
                  ((org-agenda-overriding-header "Tickler")
                   (org-agenda-todo-ignore-scheduled 'future)))
       (agenda)))
     ("w" "Waiting" tags-todo "+waiting"
      ((org-agenda-todo-ignore-scheduled 'future)))
     ("s" "Someday" tags-todo "+someday")
     ("F" "Non-future" tags ""
      ((org-agenda-todo-ignore-scheduled 'future)))
     ("n" "Next" tags-todo "+next"
      ((org-agenda-todo-ignore-scheduled 'future)
       (org-agenda-dim-blocked-tasks 'invisible)))
     ("N" "Next including blocked" tags-todo "+next"
      ((org-agenda-todo-ignore-scheduled 'future)))))
#+END_SRC
*** narrow-to-subtree
Based on vimacs/narrow-to-subtree that I found somewhere in the
internets.
#+name: narrow-to-subtree
#+BEGIN_SRC emacs-lisp :tangle no
  (defvar-local this-buffer-refcount 0
    "\"Reference count\" for an indirect buffer created using
   \"toggle-narrow\".")

  (defun aragaer--toggle-narrow (&optional point)
    "If buffer is narrowed, widen it (argument is ignored).
  Otherwise if point is set it must be on an org heading."
    (if (buffer-narrowed-p)
        (let ((curbuf (current-buffer))
              (last-ref-p (= 0 (cl-decf this-buffer-refcount))))
          (switch-to-buffer (buffer-base-buffer))
          (when last-ref-p
              (kill-buffer curbuf)))
      (let* ((point (or point
                        (save-excursion
                          (org-back-to-heading t)
                          (point))))
             (elt (org-element-at-point point))
             (title (org-element-property :raw-value elt))
             (new-buffer-name (concat (buffer-name) " -> " title))
             (curpoint (point)))
        (switch-to-buffer
         (or (get-buffer new-buffer-name)
             (clone-indirect-buffer new-buffer-name nil)))
        (cl-incf this-buffer-refcount)
        (org-fold-reveal)
        (org-narrow-to-subtree elt)
        (goto-char curpoint))))
#+END_SRC
** bind
#+NAME: org-bind-keys
#+BEGIN_SRC emacs-lisp :tangle no
  (("C-c a" . org-agenda))
#+END_SRC
** use package
#+BEGIN_SRC emacs-lisp :noweb yes
  (use-package org
    :init
    <<narrow-to-subtree>>
    <<my-org-modules>>
    :bind
    <<org-bind-keys>>
    :mode ("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)
    :hook (org-mode . visual-line-mode)
    :config
    (add-to-list 'org-todo-keyword-faces
                 '("CANCELLED" . (:foreground "blue" :weight bold)))
    (org-load-modules-maybe t)
    (unbind-key "C-'" org-mode-map) ; Free this one for avy
    :custom
    <<org-habits-custom>>
    <<agenda-custom>>
    <<my-org-capture-templates>>
    (org-image-actual-width '(500))
    (org-export-with-sub-superscripts nil)
    (org-blank-before-new-entry '((heading . nil) (plain-list-item . nil)))
    (org-confirm-babel-evaluate nil)
    (org-enforce-todo-dependencies t)
    (org-extend-today-until 3)
    (org-hide-leading-stars t)
    (org-log-into-drawer "LOGBOOK")
    (org-outline-path-complete-in-steps nil)
    (org-refile-use-outline-path 'file)
    (org-archive-location "archive/%s::")
    (org-return-follows-link t)
    (org-hide-blocks-startup t)
    (org-todo-keywords (quote ((sequence "TODO" "|" "DONE") (sequence "|" "CANCELLED"))))
    (org-refile-targets
     '((nil :maxlevel . 3)
       (org-agenda-files :maxlevel . 3)))
    (org-capture-bookmark nil)
    (org-startup-indented t)
    (org-fold-show-context-detail '((default . canonical)))
    :custom-face
    (org-agenda-calendar-sexp ((t (:foreground "dark violet" :weight bold))))
    (org-mode-line-clock ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button))))))
#+END_SRC
** calendar
#+BEGIN_SRC emacs-lisp
  (use-package calendar
    :ensure nil
    :commands (calendar)
    :custom (calendar-week-start-day 1))
#+END_SRC
** checklist
#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
#+END_SRC
** auto-close archive
Automatically close archive file after archiving a subtree
Unless it was open before archiving
#+BEGIN_SRC emacs-lisp
  (defun aragaer/auto-close-archive (orig-func &rest r)
    (let* ((location (org-archive--compute-location org-archive-location))
           (afile (car location))
           (abuffer (get-file-buffer afile)))
      (apply orig-func r)
      (unless abuffer
        (let ((abuffer (get-file-buffer afile)))
          (when abuffer
              (save-some-buffers t abuffer)
              (kill-buffer abuffer))))))

  (advice-add 'org-archive-subtree :around #'aragaer/auto-close-archive)
#+END_SRC

Also close all agenda files that were opened when updating org-id locations.
#+begin_src emacs-lisp
  (defun aragaer/close-after-id-update (orig-func &rest r)
    (let ((to-close (seq-remove #'get-file-buffer (org-agenda-files t org-id-search-archives))))
      (apply orig-func r)
      (mapcar (lambda (f)
                (let ((abuffer (get-file-buffer f)))
                  (if abuffer
                      (kill-buffer abuffer))))
              to-close)))

  (advice-add 'org-id-update-id-locations :around #'aragaer/close-after-id-update)
#+end_src
** reopen "nohide" blocks
I want my 'src' blocks to be hidden by default but their results
wrapped in blocks should be visible. For that I use ':wrap nohide'.
#+begin_src emacs-lisp
  (defun aragaer/show-nohide (&rest r)
    (let* ((e (org-element-at-point))
           (subtype (org-element-property :type e)))
      (when (equal subtype "nohide")
        (org-fold-hide-block-toggle nil t e))))

  (advice-add
   'org-fold-hide-block-all
   :after
   (lambda (&rest r) (org-block-map #'aragaer/show-nohide))
   '((name . "show-nohide")))
#+end_src
* utils
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
** vdiff
#+BEGIN_SRC emacs-lisp
  (use-package vdiff
    :ensure t
    :custom
    (vdiff-truncate-lines t)
    :config
    (define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map))
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    :config
    (ivy-mode t))
#+END_SRC
** reverse-im
#+BEGIN_SRC emacs-lisp
  (use-package reverse-im
    :ensure t
    :demand t
    :custom
    (reverse-im-char-fold t)
    (reverse-im-read-char-advice-function #'reverse-im-read-char-exclude)
    (reverse-im-input-methods '("russian-computer"))
    :config
    (reverse-im-mode t)
    ;; workaround for some read-only modes
    (suppress-keymap org-agenda-mode-map)
    )
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status))
    :custom
    (magit-log-margin '(t age-abbreviated magit-log-margin-width t 7))
    :init
    (require 'magit-git)
    (require 'magit-process))
#+END_SRC
** epa-file
#+BEGIN_SRC emacs-lisp
  (use-package epa-file
    :config (epa-file-enable))
#+END_SRC
** ebdb
#+BEGIN_SRC emacs-lisp
  (use-package ebdb
    :ensure t
    :custom
    (ebdb-sources "~/Dropbox/org/ebdb"))
#+END_SRC
** avy
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    (("C-'" .   avy-goto-char-timer)
     :map goto-map
     ("M-g" . avy-goto-line)
     :map search-map
     ("M-s" . avy-goto-word-1)))
#+end_src
** org-journal
#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :config
    (setq org-journal-dir "~/Dropbox/mind_dump/journal"
          org-journal-file-format "journal-%Y-%m-%d.org")
    :custom
    (org-journal-file-type 'weekly)
    (org-journal-date-format "%A, %Y-%m-%d")
    (org-journal-start-on-weekday 7)
    (org-journal-hide-entries-p t)
    (org-journal-enable-agenda-integration t)
    (org-journal-file-header (lambda (time) "#+startup: overview\n#+startup: shrink\n#+category: journal\n")))

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))

  (defvar org-journal--date-location-scheduled-time nil)

  (defun org-journal-date-location (&optional scheduled-time)
    (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
      (setq org-journal--date-location-scheduled-time scheduled-time)
      (org-journal-new-entry t (org-time-string-to-time scheduled-time))
      (goto-char (point-max))))
#+end_src
** project.el
#+begin_src emacs-lisp
  (use-package project
    :ensure t
    :custom
    (project-switch-commands
     '((?f "Find file" project-find-file)
       (?g "Magit status" magit-status))))
#+end_src
** emacs-everywhere
#+begin_src emacs-lisp
  (use-package emacs-everywhere
    :ensure t)
#+end_src
** org-roam
*** additional node methods
**** hierarchy
#+name: roam-node-hierarchy
#+begin_src emacs-lisp :tangle no
  (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
    "Return the hierarchy for the node."
    (let ((title (org-roam-node-title node))
          (olp (org-roam-node-olp node))
          (level (org-roam-node-level node))
          (filetitle (org-roam-node-file-title node)))
      (concat
       (if (> level 0) (concat filetitle " > "))
       (if (> level 1) (concat (string-join olp " > ") " > "))
       title)))
#+end_src
**** node container type
Currently not used
#+name: roam-node-namespace
#+begin_src elisp :tangle no
  (cl-defmethod org-roam-node-namespace ((node org-roam-node))
    (cdr (assoc-string "ROAM-NAMESPACE" (org-roam-node-properties node))))

  (defun +aragaer--add-roam-namespace (properties)
    (if-let ((ns (org-entry-get-with-inheritance "ROAM-NAMESPACE")))
        (cl-acons "ROAM-NAMESPACE" ns properties)
      properties))

  (advice-add 'org-roam-db-insert-node-data :around
              (defun +aragaer--add-roam-namespace-on-save (fn &rest args)
                (advice-add 'org-entry-properties
                            :filter-return #'+aragaer--add-roam-namespace)
                (unwind-protect
                    (apply fn args)
                  (advice-remove 'org-entry-properties
                                 #'+aragaer--add-roam-namespace))))
#+end_src
**** explicit node category
#+name: roam-node-explicit-category
#+begin_src elisp :tangle no
  (cl-defmethod org-roam-node-explicit-category ((node org-roam-node))
    (let ((file-name (file-name-nondirectory (org-roam-node-file node)))
          (category (org-roam-node-category node)))
      (unless (string-prefix-p category file-name)
          category)))
#+end_src
**** node type
#+name: roam-node-type
#+begin_src emacs-lisp :tangle no
  (cl-defmethod org-roam-node-type ((node org-roam-node))
    "Return the TYPE of NODE."
    (or (org-roam-node-explicit-category node)
        (condition-case nil
            (file-name-nondirectory
             (directory-file-name
              (file-name-directory
               (file-relative-name (org-roam-node-file node) org-roam-directory))))
          (error ""))))
#+end_src
**** node context tags
#+name: roam-node-context-tags
#+begin_src emacs-lisp :tangle no
  (cl-defmethod org-roam-node-context-tag ((node org-roam-node))
    "Return the @tags of NODE."
    (cl-find ?@ (reverse (org-roam-node-tags node))
             :key #'string-to-char
             :test #'char-equal))
#+end_src
*** narrow to roam node
#+name: narrow-to-roam-node
#+begin_src elisp
  (defun aragaer--narrow-to-org-roam-node ()
    "If inside org-roam node and that node is heading, narrow to it.
  Otherwise narrow to `nil' (nearest org heading)."
    (interactive)
    (let ((node (org-roam-node-at-point)))
      (aragaer--toggle-narrow (and node
                                   (< 0 (org-roam-node-level node))
                                   (org-roam-node-point node)))))
#+end_src
*** async roam-db-autosync
#+name: async-roam-autosync
#+begin_src elisp
  (defun enable-roam-autosync ()
    (let ((proc (start-process "roam-db-sync" "*roam-db-sync*"
                               "emacs" "--fg-daemon=roam-db-sync" "-nw"
                               "--execute" "(remove-hook 'emacs-startup-hook 'enable-roam-autosync)"
                               "--execute" "(org-roam-db-sync)"
                               "--kill")))
      (set-process-sentinel proc
                            (lambda (process event)
                              (when (string= event "finished\n")
                                (org-roam-db-autosync-enable)
                                (message "Roam DB sync done, autosync enabled"))))))
#+end_src
*** use-package
#+begin_src emacs-lisp :noweb yes
  (use-package org-roam
    :ensure t
    :load-path (lambda () (expand-file-name "~/Projects/org-roam/"))
    :hook
    (emacs-startup . enable-roam-autosync)
    :custom
    (org-roam-directory (file-truename "~/Dropbox/org/roam/"))
    (org-roam-db-update-method 'immediate)
    (org-roam-node-display-template
     (concat (propertize "${type:15}" 'face 'org-tag)
             "${title:*} "
             (propertize "${tags:20}" 'face 'org-tag)))
    (org-roam-capture-templates
     `(("d" "default" entry "* ${title}\n%?"
        :target (node "unsorted slipbox")
        :prepare-finalize ,(lambda ()
                             (beginning-of-buffer)
                             (org-id-get-create)))))
    :bind ((("C-c n l" . org-roam-buffer-toggle)
            ("C-c n c" . org-roam-capture)
            ("C-c n f" . org-roam-node-find))
           :map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-<tab>" . aragaer--narrow-to-org-roam-node)))
    :init
    (setq org-roam-v2-ack t)
    (setq slipboxes '("unsorted" "zk" "projects" "services"))
    :config
    <<roam-node-hierarchy>>
    <<roam-node-type>>
    <<roam-node-context-tags>>
    <<roam-node-explicit-category>>
    <<narrow-to-roam-node>>
    <<roam-db-autosync>>
    (with-eval-after-load
        'recentf
        (add-to-list 'recentf-exclude (f-join org-roam-directory ".*")))
    (push "ZK_TAGS" (cdr (assoc 'node-property org-roam-db-extra-links-exclude-keys)))
    (require 'org-roam-dailies))
#+end_src
** benchmark
#+NAME: benchmark
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package benchmark-init
    :ensure t
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC
* helpers
** hledger
#+BEGIN_SRC emacs-lisp
  (defun hledger-account-read ()
    (interactive)
    (insert (completing-read
             "account: " (split-string (shell-command-to-string "hledger acc") "\n" t)))
    (insert "  "))
#+END_SRC
* modes
** olivetti
#+BEGIN_SRC emacs-lisp
  (use-package olivetti
    :ensure t)
#+END_SRC
** feature-mode
#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
    :ensure t)
#+END_SRC
** my-writing-mode
#+BEGIN_SRC emacs-lisp
  (define-derived-mode my-writing-mode org-mode "my-writing"
    (setopt olivetti-body-width 120)
    (olivetti-mode t))
#+END_SRC
** hooks
*** prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'whitespace-mode)
#+END_SRC
*** golang
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook (lambda ()
                            (setopt indent-tabs-mode t
                                    tab-width 4)))
#+END_SRC
*** octave
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
#+END_SRC
*** c-sharp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cs$" . c-mode))
#+END_SRC
*** changelog
#+BEGIN_SRC emacs-lisp
  (rassq-delete-all 'change-log-mode auto-mode-alist)
#+END_SRC
** non-edit
#+begin_src elisp
  (use-package non-edit-mode
    :ensure t
    :bind ("C-<escape>" . non-edit-mode)
    :hook ((prog-mode . non-edit-for-files)
           (text-mode . non-edit-for-protected)
           ((with-editor-mode mu4e-compose-mode) . (lambda () (non-edit-mode -1))))
    :config
    (defun is-protected (file-name)
      (string-prefix-p org-roam-directory file-name))

    (defun non-edit-for-protected ()
      (when-let* ((file-name (buffer-file-name))
                  (is-protected file-name))
        (non-edit-mode)))

    (defun non-edit-for-files ()
      (when (buffer-file-name)
        (non-edit-mode))))
#+end_src
* daily page
#+BEGIN_SRC emacs-lisp
  (defun daily-page ()
    (interactive)
    (let ((header "#-*- Mode: my-writing -*-\n"))
      (with-current-buffer
          (find-file
           (concat *daily-page-dir*
                   (format-time-string "%Y-%m-%d.txt" (current-time))))
        (my-writing-mode)
        (if (> 2 (point-max-marker))
            (insert header))
        (narrow-to-region (1+ (length header)) (point-max-marker)))))
#+END_SRC
* telega
#+BEGIN_SRC emacs-lisp
  (defun telega/ignore-chatbuf (str)
    (let ((buf (get-buffer str)))
      (and buf (fboundp 'telega-buffer-p) (telega-buffer-p buf))))

  (with-eval-after-load 'ivy
    (add-to-list 'ivy-ignore-buffers #'telega/ignore-chatbuf))

  (defun aragaer--telega+avy-goto (&optional arg)
    (interactive "P")
    (if arg
        (avy-goto-char-timer)
      (let ((avy-action-oneshot (lambda (arg)
                                  (if (eq major-mode 'telega-root-mode)
                                      (push-button arg)
                                    (avy-action-goto arg)))))
        (avy-goto-char-timer))))

  (use-package telega
    :ensure t
    :bind
    (:map mode-specific-map
          :prefix-map telega-map
          :prefix "t"
          ("t" . telega)
          ("c" . telega-chat-with)
    :map telega-chat-mode-map
          ("C-'" . aragaer--telega+avy-goto))
    :hook (telega-root-mode . hl-line-mode)
    :custom
    (telega-use-images t)
    (telega-completing-read-function #'ivy-completing-read)
    (telega-symbol-msg-succeeded "-")
    (telega-symbol-msg-viewed "+")
    (telega-chat--display-buffer-action
     '((display-buffer-reuse-window display-buffer-use-some-window)))
    (telega-voice-chat-display '())
    (telega-server-libs-prefix (expand-file-name "~/.local/td"))
    (telega-webpage-preview-description-limit 80)
    (telega-video-player-command "mpv")
    :custom-face
    (telega-chat-inline-reply ((t (:inherit 'font-lock-comment-face))))
    (telega-chat-user-title ((t (:inherit 'font-lock-function-name-face))))
    (telega-chat-timestamp ((t (:inherit 'org-agenda-date))))
    (telega-msg-status ((t (:inherit 'font-lock-constant-face))))
    :config
    (advice-add 'telega-ins--sticker-image :around
                (defun +disable-telega-stickers (orig-fun &rest args)
                  (let ((telega-use-images nil))
                    (apply orig-fun args))))
    (telega-contact-birthdays-mode -1)
    (set-face-attribute 'telega-entity-type-code nil :height 1.0)
    (set-face-attribute 'telega-entity-type-pre nil :height 1.0)
    :commands (telega)
    :defer t)
#+END_SRC
* elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    :bind (("C-c f" . elfeed)))

  (use-package elfeed-goodies
    :ensure t
    :after elfeed
    :custom
    (elfeed-goodies/entry-pane-position 'bottom)
    :config
    (elfeed-goodies/setup))
#+END_SRC
* config
** browser
#+BEGIN_SRC emacs-lisp
  (defun get-next-or-first (seq &optional current)
    (cl-first
     (if current
         (cl-loop for (item . rest) on seq
                  until (string= item current)
                  finally return (or rest seq))
       seq)))
  (defun aragaer/switch-browser (&optional reset)
    (interactive "P")
    (setq browse-url-generic-program
          (if reset
              (car *browsers*)
            (get-next-or-first *browsers* browse-url-generic-program)))
    (message "Using browser %s" browse-url-generic-program))

  (define-key global-map (kbd "C-x g") 'aragaer/switch-browser)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program (car *browsers*))
#+END_SRC
** time locale
#+begin_src elisp
  (setq system-time-locale "C")
#+end_src
* load local settings
#+BEGIN_SRC emacs-lisp
  (let ((local-settings-file (locate-user-emacs-file "local_settings.el")))
    (if (file-exists-p local-settings-file)
        (load local-settings-file)))
  (let ((local-org-settings-file (locate-user-emacs-file "local.org")))
    (if (file-exists-p local-org-settings-file)
        (org-babel-load-file local-org-settings-file)))
#+END_SRC
* extra org things
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (defun load-extra-org-stuff ()
              (let ((org-tweaks-file (locate-user-emacs-file "my-org.org")))
                (if (file-exists-p org-tweaks-file)
                    (org-babel-load-file org-tweaks-file)))))
#+END_SRC
